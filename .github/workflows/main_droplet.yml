# This is a workflow which builds image and deploys to DO

name: Continuous Integration and Delivery

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [master]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  BACKEND_IMAGE: registry.digitalocean.com/mr-project/backend:latest

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains two jobs: build and deploy afterwards
  build:
    name: Build Docker Images
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout master
        uses: actions/checkout@v2

      - name: Add environment variables to .prod.env
        run: |
          echo DJANGO_DEBUG=${{ secrets.DJANGO_DEBUG }} >> .prod.env
          echo SECRET_KEY="${{ secrets.SECRET_KEY }}" >> .prod.env
          echo DJANGO_HOST=${{ secrets.DJANGO_HOST }} >> .prod.env
          echo DJANGO_ALLOWED_HOSTS=${{ secrets.DJANGO_ALLOWED_HOSTS }} >> .prod.env
          echo DJANGO_CORS_ALLOWED_ORIGINS=${{ secrets.DJANGO_CORS_ALLOWED_ORIGINS }} >> .prod.env
          echo DJANGO_SETTINGS_MODULE=${{ secrets.DJANGO_SETTINGS_MODULE }} >> .prod.env
          echo DJANGO_SENTRY_DSN=${{ secrets.DJANGO_SENTRY_DSN }} >> .prod.env
          echo DATABASE_ENGINE=${{ secrets.DATABASE_ENGINE }} >> .prod.env
          echo POSTGRES_DB=${{ secrets.POSTGRES_DB }} >> .prod.env
          echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .prod.env
          echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .prod.env
          echo POSTGRES_HOST=${{ secrets.POSTGRES_HOST }} >> .prod.env
          echo POSTGRES_PORT=${{ secrets.POSTGRES_PORT }} >> .prod.env
          echo USE_S3=${{ secrets.USE_S3 }} >> .prod.env
          echo AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} >> .prod.env
          echo AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} >> .prod.env
          echo AWS_STORAGE_BUCKET_NAME=${{ secrets.AWS_STORAGE_BUCKET_NAME }} >> .prod.env
          echo AWS_S3_ENDPOINT_URL=${{ secrets.AWS_S3_ENDPOINT_URL }} >> .prod.env
          echo DOMAIN=${{ secrets.DOMAIN }} >> .prod.env

      - name: Set environment variables
        run: |
          echo "BACKEND_IMAGE=$(echo ${{env.BACKEND_IMAGE}} )" >> $GITHUB_ENV

      # install doctl for accessing DO registry
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITAL_OCEAN_ACCESS_TOKEN }}

      # login into DO registry
      - name: Log in to DO Container Registry
        run: doctl registry login --expiry-seconds 800

      # pull images
      - name: Pull images
        run: |
          docker pull ${{ env.BACKEND_IMAGE }} || true

      # build images
      - name: Build images
        run: |
          docker-compose -f docker-compose.prod.yml build backend

      # push images
      - name: Push images
        run: |
          docker push ${{ env.BACKEND_IMAGE }}

  deploy:
    name: Deploy to DigitalOcean
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/master'
    steps:
      - name: Checkout master
        uses: actions/checkout@v2

      - name: Set environment variable
        run: |
          echo "BACKEND_IMAGE=$(echo ${{env.BACKEND_IMAGE}} )" >> $GITHUB_ENV

      - name: Add environment variables to .prod.env
        run: |
          echo DJANGO_DEBUG=${{ secrets.DJANGO_DEBUG }} >> .prod.env
          echo SECRET_KEY="${{ secrets.SECRET_KEY }}" >> .prod.env
          echo DJANGO_HOST=${{ secrets.DJANGO_HOST }} >> .prod.env
          echo DJANGO_ALLOWED_HOSTS=${{ secrets.DJANGO_ALLOWED_HOSTS }} >> .prod.env
          echo DJANGO_CORS_ALLOWED_ORIGINS=${{ secrets.DJANGO_CORS_ALLOWED_ORIGINS }} >> .prod.env
          echo DJANGO_SETTINGS_MODULE=${{ secrets.DJANGO_SETTINGS_MODULE }} >> .prod.env
          echo DJANGO_SENTRY_DSN=${{ secrets.DJANGO_SENTRY_DSN }} >> .prod.env
          echo DATABASE_ENGINE=${{ secrets.DATABASE_ENGINE }} >> .prod.env
          echo POSTGRES_DB=${{ secrets.POSTGRES_DB }} >> .prod.env
          echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .prod.env
          echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .prod.env
          echo POSTGRES_HOST=${{ secrets.POSTGRES_HOST }} >> .prod.env
          echo POSTGRES_PORT=${{ secrets.POSTGRES_PORT }} >> .prod.env
          echo USE_S3=${{ secrets.USE_S3 }} >> .prod.env
          echo AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} >> .prod.env
          echo AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} >> .prod.env
          echo AWS_STORAGE_BUCKET_NAME=${{ secrets.AWS_STORAGE_BUCKET_NAME }} >> .prod.env
          echo AWS_S3_ENDPOINT_URL=${{ secrets.AWS_S3_ENDPOINT_URL }} >> .prod.env
          echo DOMAIN=${{ secrets.DOMAIN }} >> .prod.env

      - name: Add the private SSH key to the ssh-agent
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        run: |
          mkdir -p ~/.ssh
          ssh-agent -a $SSH_AUTH_SOCK > /dev/null
          ssh-keyscan github.com >> ~/.ssh/known_hosts
          ssh-add - <<< "${{ secrets.PRIVATE_KEY }}"

      - name: Deploy images on DigitalOcean
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        run: |
          scp -o StrictHostKeyChecking=no -r .prod.env docker-compose.prod.yml root@${{ secrets.DIGITAL_OCEAN_IP_ADDRESS }}:mr-django
          ssh -o StrictHostKeyChecking=no root@${{ secrets.DIGITAL_OCEAN_IP_ADDRESS }} << 'ENDSSH'
            cd mr-django
            source .prod.env
            doctl registry login --expiry-seconds 180
            docker pull ${{ env.BACKEND_IMAGE }}
            docker-compose -f docker-compose.prod.yml up -d
          ENDSSH
