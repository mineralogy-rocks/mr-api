# Generated by Django 4.1.3 on 2023-10-16 18:27

import uuid

import django.contrib.postgres.fields
import django.db.models.deletion
from django.conf import settings
from django.db import migrations
from django.db import models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="BondingType",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("name", models.CharField(max_length=200, unique=True)),
            ],
            options={
                "verbose_name": "Bonding Type",
                "verbose_name_plural": "Bonding Types",
                "db_table": "bonding_type_list",
            },
        ),
        migrations.CreateModel(
            name="ChemicalGroup",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("name", models.CharField(max_length=200, unique=True)),
            ],
            options={
                "verbose_name": "Chemical Group",
                "verbose_name_plural": "Chemical Groups",
                "db_table": "chemical_group_list",
            },
        ),
        migrations.CreateModel(
            name="Country",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("name", models.CharField(max_length=200, unique=True)),
                ("alpha_2", models.CharField(max_length=10, null=True)),
                ("alpha_3", models.CharField(max_length=10, null=True)),
                ("country_code", models.IntegerField(null=True)),
                ("region", models.CharField(max_length=100, null=True)),
                ("sub_region", models.CharField(max_length=100, null=True)),
                ("intermediate_region", models.CharField(max_length=100, null=True)),
            ],
            options={
                "verbose_name": "Country",
                "verbose_name_plural": "Countries",
                "db_table": "country_list",
            },
        ),
        migrations.CreateModel(
            name="CrystalClass",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("name", models.CharField(max_length=200, unique=True)),
                ("h_m_symbol", models.CharField(blank=True, max_length=50, null=True)),
            ],
            options={
                "verbose_name": "Crystal Class",
                "verbose_name_plural": "Crystal Classes",
                "db_table": "crystal_class_list",
                "ordering": ["crystal_system", "name"],
            },
        ),
        migrations.CreateModel(
            name="CrystalSystem",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("name", models.CharField(max_length=200, unique=True)),
            ],
            options={
                "verbose_name": "Crystal System",
                "verbose_name_plural": "Crystal Systems",
                "db_table": "crystal_system_list",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="DataContext",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("name", models.CharField(max_length=200, unique=True)),
            ],
            options={
                "verbose_name": "Data Context",
                "verbose_name_plural": "Data Contexts",
                "db_table": "data_context_list",
            },
        ),
        migrations.CreateModel(
            name="Element",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("element", models.CharField(max_length=2)),
                ("name", models.CharField(max_length=20)),
                ("atomic_number", models.IntegerField()),
                ("name_alternative", models.CharField(max_length=20, null=True)),
                ("atomic_mass", models.DecimalField(decimal_places=12, max_digits=15)),
                ("atomic_mass_standard_uncertainty", models.IntegerField(null=True)),
                ("electronic_configuration", models.CharField(max_length=30)),
                ("cpk_hex_color", models.CharField(max_length=6, null=True)),
                ("electronegativity", models.DecimalField(decimal_places=2, max_digits=3, null=True)),
                ("empirical_atomic_radius", models.IntegerField(null=True)),
                ("calculated_atomic_radius", models.IntegerField(null=True)),
                ("van_der_waals_radius", models.IntegerField(null=True)),
                ("covalent_single_bond_atomic_radius", models.IntegerField(null=True)),
                ("covalent_triple_bond_atomic_radius", models.IntegerField(null=True)),
                ("metallic_atomic_radius", models.IntegerField(null=True)),
                ("ion_radius", models.DecimalField(decimal_places=2, max_digits=5, null=True)),
                ("ion_radius_charge", models.CharField(max_length=5, null=True)),
                ("ionization_energy", models.IntegerField(null=True)),
                ("electron_affinity", models.IntegerField(null=True)),
                ("oxidation_states", models.CharField(max_length=50, null=True)),
                ("melting_point", models.IntegerField(null=True)),
                ("boiling_point", models.IntegerField(null=True)),
                ("density", models.DecimalField(decimal_places=6, max_digits=8, null=True)),
                ("crust_crc_handbook", models.DecimalField(decimal_places=10, max_digits=11, null=True)),
                ("crust_kaye_laby", models.DecimalField(decimal_places=10, max_digits=11, null=True)),
                ("crust_greenwood", models.DecimalField(decimal_places=10, max_digits=11, null=True)),
                ("crust_ahrens_taylor", models.DecimalField(decimal_places=10, max_digits=11, null=True)),
                ("crust_ahrens_wanke", models.DecimalField(decimal_places=10, max_digits=11, null=True)),
                ("crust_ahrens_waver", models.DecimalField(decimal_places=10, max_digits=11, null=True)),
                ("upper_crust_ahrens_taylor", models.DecimalField(decimal_places=10, max_digits=11, null=True)),
                ("upper_crust_ahrens_shaw", models.DecimalField(decimal_places=10, max_digits=11, null=True)),
                ("sea_water_crc_handbook", models.DecimalField(decimal_places=11, max_digits=11, null=True)),
                ("sea_water_kaye_laby", models.DecimalField(decimal_places=11, max_digits=11, null=True)),
                ("sun_kaye_laby", models.DecimalField(decimal_places=11, max_digits=16, null=True)),
                ("solar_system_kaye_laby", models.DecimalField(decimal_places=11, max_digits=16, null=True)),
                ("solar_system_ahrens", models.DecimalField(decimal_places=11, max_digits=16, null=True)),
                (
                    "solar_system_ahrens_with_uncertainty",
                    models.DecimalField(decimal_places=2, max_digits=4, null=True),
                ),
                ("natural_isotopes", models.TextField(null=True)),
                ("name_meaning", models.TextField(null=True)),
                ("discovery_year", models.IntegerField(null=True)),
                ("discoverer", models.TextField(null=True)),
                ("application", models.TextField(null=True)),
                ("safety", models.TextField(null=True)),
                ("biological_role", models.TextField(null=True)),
                (
                    "bonding_type",
                    models.ForeignKey(
                        db_column="bonding_type_id",
                        default=None,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="elements",
                        to="core.bondingtype",
                    ),
                ),
                (
                    "chemical_group",
                    models.ForeignKey(
                        db_column="chemical_group_id",
                        default=None,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="elements",
                        to="core.chemicalgroup",
                    ),
                ),
            ],
            options={
                "verbose_name": "ELement",
                "verbose_name_plural": "Elements",
                "db_table": "element_list",
            },
        ),
        migrations.CreateModel(
            name="FormulaSource",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("name", models.CharField(max_length=200, unique=True)),
                ("url", models.URLField()),
            ],
            options={
                "verbose_name": "Formula Source",
                "verbose_name_plural": "Formula Sources",
                "db_table": "formula_source_list",
            },
        ),
        migrations.CreateModel(
            name="GoldschmidtClass",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("name", models.CharField(max_length=200, unique=True)),
            ],
            options={
                "verbose_name": "Goldschmidt Class",
                "verbose_name_plural": "Goldschmidt Classes",
                "db_table": "goldschmidt_class_list",
            },
        ),
        migrations.CreateModel(
            name="IMANote",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("name", models.CharField(max_length=200, unique=True)),
                ("key", models.CharField(max_length=100, unique=True)),
            ],
            options={
                "verbose_name": "IMA Note",
                "verbose_name_plural": "IMA Notes",
                "db_table": "ima_note_list",
                "ordering": ["key"],
            },
        ),
        migrations.CreateModel(
            name="IMAStatus",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("name", models.CharField(max_length=200, unique=True)),
                ("key", models.CharField(max_length=100, unique=True)),
            ],
            options={
                "verbose_name": "IMA Status",
                "verbose_name_plural": "IMA Statuses",
                "db_table": "ima_status_list",
                "ordering": ["key"],
            },
        ),
        migrations.CreateModel(
            name="Ion",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("name", models.CharField(max_length=200, unique=True)),
                ("formula", models.CharField(max_length=100)),
                ("formula_with_oxidation", models.CharField(max_length=100, null=True)),
                ("overall_charge", models.CharField(max_length=100, null=True)),
                ("expressed_as", models.TextField(blank=True, null=True)),
                ("element_or_sulfide", models.BooleanField(blank=True, null=True)),
                ("structure_description", models.TextField(blank=True, null=True)),
                ("geometry", models.TextField(blank=True, null=True)),
            ],
            options={
                "verbose_name": "Ion",
                "verbose_name_plural": "Ions",
                "db_table": "ion_log",
            },
        ),
        migrations.CreateModel(
            name="IonClass",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("name", models.CharField(max_length=200, unique=True)),
            ],
            options={
                "verbose_name": "Ion Class",
                "verbose_name_plural": "Ion Classes",
                "db_table": "ion_class_list",
            },
        ),
        migrations.CreateModel(
            name="IonGroup",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("name", models.CharField(max_length=200, unique=True)),
            ],
            options={
                "verbose_name": "Ion Group",
                "verbose_name_plural": "Ion Groups",
                "db_table": "ion_group_list",
            },
        ),
        migrations.CreateModel(
            name="IonPosition",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("name", models.CharField(max_length=200, unique=True)),
            ],
            options={
                "verbose_name": "Ion Position",
                "verbose_name_plural": "Ion Positions",
                "db_table": "ion_position_list",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="IonSubclass",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("name", models.CharField(max_length=200, unique=True)),
            ],
            options={
                "verbose_name": "Ion Subclass",
                "verbose_name_plural": "Ion Subclasses",
                "db_table": "ion_subclass_list",
            },
        ),
        migrations.CreateModel(
            name="IonSubgroup",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("name", models.CharField(max_length=200, unique=True)),
            ],
            options={
                "verbose_name": "Ion Subgroup",
                "verbose_name_plural": "Ion Subgroups",
                "db_table": "ion_subgroup_list",
            },
        ),
        migrations.CreateModel(
            name="IonType",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("name", models.CharField(max_length=200, unique=True)),
            ],
            options={
                "verbose_name": "Ion Type",
                "verbose_name_plural": "Ion Types",
                "db_table": "ion_type_list",
            },
        ),
        migrations.CreateModel(
            name="MindatSync",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("values", models.JSONField(blank=True, null=True)),
                ("is_successful", models.BooleanField(default=True)),
            ],
            options={
                "verbose_name": "Mindat Sync History",
                "verbose_name_plural": "Mindat Syncs",
                "db_table": "mindat_sync_log",
            },
        ),
        migrations.CreateModel(
            name="Mineral",
            fields=[
                ("name", models.CharField(max_length=200, unique=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("id", models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                (
                    "slug",
                    models.SlugField(
                        blank=True,
                        help_text="Slug used for retrieving through website.",
                        max_length=255,
                        null=True,
                        unique=True,
                    ),
                ),
                (
                    "note",
                    models.TextField(
                        blank=True, help_text="Please, leave your notes about the specie here.", null=True
                    ),
                ),
                ("ns_mineral", models.CharField(blank=True, max_length=10, null=True)),
                (
                    "seen",
                    models.IntegerField(
                        default=0, help_text="Number of times this specie was retrieved by API and clients."
                    ),
                ),
                ("description", models.TextField(blank=True, help_text="Description from mindat.org", null=True)),
                ("mindat_id", models.IntegerField(blank=True, null=True)),
                (
                    "ima_symbol",
                    models.CharField(blank=True, help_text="Official IMA symbol.", max_length=12, null=True),
                ),
            ],
            options={
                "verbose_name": "Mineral",
                "verbose_name_plural": "Minerals",
                "db_table": "mineral_log",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="MineralRelation",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                (
                    "note",
                    models.TextField(
                        blank=True, help_text="Please, leave your notes about the relation here.", null=True
                    ),
                ),
                (
                    "mineral",
                    models.ForeignKey(
                        db_column="mineral_id", on_delete=django.db.models.deletion.CASCADE, to="core.mineral"
                    ),
                ),
                (
                    "relation",
                    models.ForeignKey(
                        db_column="relation_id",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="inverse_relations",
                        to="core.mineral",
                    ),
                ),
            ],
            options={
                "verbose_name": "Relation",
                "verbose_name_plural": "Relations",
                "db_table": "mineral_relation",
            },
        ),
        migrations.CreateModel(
            name="NsClass",
            fields=[
                ("id", models.SmallIntegerField(primary_key=True, serialize=False)),
                ("description", models.TextField()),
            ],
            options={
                "verbose_name": "Nickel-Strunz Class",
                "verbose_name_plural": "Nickel-Strunz Classes",
                "db_table": "ns_class",
                "ordering": ["id"],
            },
        ),
        migrations.CreateModel(
            name="PhaseState",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("name", models.CharField(max_length=200, unique=True)),
            ],
            options={
                "verbose_name": "Phase State",
                "verbose_name_plural": "Phase States",
                "db_table": "phase_state_list",
            },
        ),
        migrations.CreateModel(
            name="RelationType",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("name", models.CharField(max_length=200, unique=True)),
                ("note", models.TextField(blank=True, null=True)),
            ],
            options={
                "verbose_name": "Relation Type",
                "verbose_name_plural": "Relation Types",
                "db_table": "relation_type_list",
            },
        ),
        migrations.CreateModel(
            name="StatusGroup",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("name", models.CharField(max_length=200, unique=True)),
                ("slug", models.CharField(max_length=100, unique=True)),
            ],
            options={
                "verbose_name": "Status Group",
                "verbose_name_plural": "Status Groups",
                "db_table": "status_group_list",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="Status",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("status_id", models.FloatField()),
                ("description_long", models.TextField(blank=True, null=True)),
                ("description_short", models.CharField(max_length=100)),
                ("slug", models.CharField(max_length=200, unique=True)),
                (
                    "group",
                    models.ForeignKey(
                        db_column="status_group_id", on_delete=django.db.models.deletion.CASCADE, to="core.statusgroup"
                    ),
                ),
            ],
            options={
                "verbose_name": "Status",
                "verbose_name_plural": "Statuses",
                "db_table": "status_list",
                "ordering": ["status_id"],
            },
        ),
        migrations.CreateModel(
            name="SpaceGroup",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("name", models.CharField(max_length=200, unique=True)),
                (
                    "crystal_class",
                    models.ForeignKey(
                        db_column="crystal_class_id",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="space_groups",
                        to="core.crystalclass",
                    ),
                ),
            ],
            options={
                "verbose_name": "Space Group",
                "verbose_name_plural": "Space Groups",
                "db_table": "space_group_list",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="NsSubclass",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("ns_subclass", models.CharField(max_length=4, unique=True)),
                ("description", models.TextField()),
                (
                    "ns_class",
                    models.ForeignKey(
                        db_column="ns_class",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="subclasses",
                        to="core.nsclass",
                    ),
                ),
            ],
            options={
                "verbose_name": "Nickel-Strunz Subclass",
                "verbose_name_plural": "Nickel-Strunz Subclasses",
                "db_table": "ns_subclass",
                "ordering": ["ns_class", "ns_subclass"],
                "unique_together": {("ns_class", "ns_subclass")},
            },
        ),
        migrations.CreateModel(
            name="NsFamily",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("ns_family", models.CharField(max_length=5, unique=True)),
                ("description", models.TextField()),
                (
                    "ns_class",
                    models.ForeignKey(
                        db_column="ns_class",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="families",
                        to="core.nsclass",
                    ),
                ),
                (
                    "ns_subclass",
                    models.ForeignKey(
                        db_column="ns_subclass",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="families",
                        to="core.nssubclass",
                    ),
                ),
            ],
            options={
                "verbose_name": "Nickel-Strunz Family",
                "verbose_name_plural": "Nickel-Strunz Families",
                "db_table": "ns_family",
                "ordering": ["ns_class", "ns_family"],
                "unique_together": {("ns_class", "ns_subclass", "ns_family")},
            },
        ),
        migrations.CreateModel(
            name="MineralStructure",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "cod",
                    models.IntegerField(
                        blank=True, db_column="cod_id", help_text="Open Crystallography Database id", null=True
                    ),
                ),
                (
                    "amcsd",
                    models.CharField(
                        blank=True,
                        db_column="amcsd_id",
                        help_text="American Mineralogist Crystal Structure Database id",
                        max_length=50,
                        null=True,
                    ),
                ),
                ("a", models.FloatField(blank=True, help_text="a parameter of the structure.", null=True)),
                ("a_sigma", models.FloatField(blank=True, help_text="a parameter sigma of the structure.", null=True)),
                ("b", models.FloatField(blank=True, help_text="b parameter of the structure.", null=True)),
                ("b_sigma", models.FloatField(blank=True, help_text="b parameter sigma of the structure.", null=True)),
                ("c", models.FloatField(blank=True, help_text="c parameter of the structure.", null=True)),
                ("c_sigma", models.FloatField(blank=True, help_text="c parameter sigma of the structure.", null=True)),
                ("alpha", models.FloatField(blank=True, help_text="alpha parameter of the structure.", null=True)),
                (
                    "alpha_sigma",
                    models.FloatField(blank=True, help_text="alpha parameter sigma of the structure.", null=True),
                ),
                ("beta", models.FloatField(blank=True, help_text="beta parameter of the structure.", null=True)),
                (
                    "beta_sigma",
                    models.FloatField(blank=True, help_text="beta parameter sigma of the structure.", null=True),
                ),
                ("gamma", models.FloatField(blank=True, help_text="gamma parameter of the structure.", null=True)),
                (
                    "gamma_sigma",
                    models.FloatField(blank=True, help_text="gamma parameter sigma of the structure.", null=True),
                ),
                ("volume", models.FloatField(blank=True, help_text="Volume of the structure.", null=True)),
                ("volume_sigma", models.FloatField(blank=True, help_text="Volume sigma of the structure.", null=True)),
                ("space_group", models.CharField(blank=True, help_text="Space group", max_length=100, null=True)),
                (
                    "formula",
                    models.CharField(blank=True, help_text="Formula of the structure.", max_length=1000, null=True),
                ),
                (
                    "calculated_formula",
                    models.CharField(
                        blank=True, help_text="Calculated formula of the structure.", max_length=1000, null=True
                    ),
                ),
                ("reference", models.TextField(blank=True, help_text="Reference of the structure.", null=True)),
                (
                    "links",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(blank=True, null=True),
                        blank=True,
                        help_text="Links to other resources.",
                        null=True,
                        size=None,
                    ),
                ),
                ("note", models.TextField(blank=True, help_text="Note of the structure.", null=True)),
                (
                    "mineral",
                    models.ForeignKey(
                        db_column="mineral_id",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="structures",
                        to="core.mineral",
                    ),
                ),
                (
                    "source",
                    models.ForeignKey(
                        db_column="source_id",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="structures",
                        to="core.formulasource",
                    ),
                ),
            ],
            options={
                "verbose_name": "Analytical Measurement",
                "verbose_name_plural": "Analytical Measurements",
                "db_table": "mineral_structure",
            },
        ),
        migrations.CreateModel(
            name="MineralStatus",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("needs_revision", models.BooleanField(default=False, help_text="Does the entry need a revision?")),
                (
                    "note",
                    models.TextField(
                        blank=True, help_text="Please, leave your notes about the status here.", null=True
                    ),
                ),
                (
                    "direct_status",
                    models.BooleanField(
                        default=True,
                        help_text="If checked, means the current species is a synonym/variety/polytype of related species.\nOtherwise, means the related species are synonyms/varieties/polytypes of current species.",
                    ),
                ),
                (
                    "author",
                    models.ForeignKey(
                        db_column="author_id",
                        help_text="Author of the last update.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "mineral",
                    models.ForeignKey(
                        db_column="mineral_id",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="direct_relations",
                        to="core.mineral",
                    ),
                ),
                ("relations", models.ManyToManyField(through="core.MineralRelation", to="core.mineral")),
                (
                    "status",
                    models.ForeignKey(
                        db_column="status_id",
                        help_text="A classification status of species.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="minerals",
                        to="core.status",
                    ),
                ),
            ],
            options={
                "verbose_name": "Status",
                "verbose_name_plural": "Statuses",
                "db_table": "mineral_status",
                "unique_together": {("mineral", "status")},
            },
        ),
        migrations.AddField(
            model_name="mineralrelation",
            name="status",
            field=models.ForeignKey(
                db_column="mineral_status_id",
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="mineral_status",
                to="core.mineralstatus",
            ),
        ),
        migrations.CreateModel(
            name="MineralIonPosition",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("quantity", models.TextField(blank=True, db_column="ion_quantity", null=True)),
                (
                    "ion",
                    models.ForeignKey(
                        db_column="ion_id",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="mineral_positions",
                        to="core.ion",
                    ),
                ),
                (
                    "mineral",
                    models.ForeignKey(
                        db_column="mineral_id",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="ions",
                        to="core.mineral",
                    ),
                ),
                (
                    "position",
                    models.ForeignKey(
                        db_column="ion_position_id", on_delete=django.db.models.deletion.CASCADE, to="core.ionposition"
                    ),
                ),
            ],
            options={
                "verbose_name": "Mineral Ions",
                "verbose_name_plural": "Minerals Ions",
                "db_table": "mineral_ion_position",
                "ordering": ["mineral"],
            },
        ),
        migrations.CreateModel(
            name="MineralImpurity",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("ion_quantity", models.CharField(blank=True, max_length=30, null=True)),
                ("rich_poor", models.BooleanField(blank=True, null=True)),
                (
                    "ion",
                    models.ForeignKey(db_column="ion_id", on_delete=django.db.models.deletion.CASCADE, to="core.ion"),
                ),
                (
                    "mineral",
                    models.ForeignKey(
                        db_column="mineral_id", on_delete=django.db.models.deletion.CASCADE, to="core.mineral"
                    ),
                ),
            ],
            options={
                "verbose_name": "Impurity",
                "verbose_name_plural": "Impurities",
                "db_table": "mineral_impurity",
            },
        ),
        migrations.CreateModel(
            name="MineralIMAStatus",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "mineral",
                    models.ForeignKey(
                        db_column="mineral_id", on_delete=django.db.models.deletion.CASCADE, to="core.mineral"
                    ),
                ),
                (
                    "status",
                    models.ForeignKey(
                        db_column="ima_status_id",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="minerals",
                        to="core.imastatus",
                    ),
                ),
            ],
            options={
                "verbose_name": "IMA Status",
                "verbose_name_plural": "IMA Statuses",
                "db_table": "mineral_ima_status",
            },
        ),
        migrations.CreateModel(
            name="MineralIMANote",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "mineral",
                    models.ForeignKey(
                        db_column="mineral_id", on_delete=django.db.models.deletion.CASCADE, to="core.mineral"
                    ),
                ),
                (
                    "note",
                    models.ForeignKey(
                        db_column="ima_note_id",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="minerals",
                        to="core.imanote",
                    ),
                ),
            ],
            options={
                "verbose_name": "IMA Note",
                "verbose_name_plural": "IMA Notes",
                "db_table": "mineral_ima_note",
            },
        ),
        migrations.CreateModel(
            name="MineralHistory",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("discovery_year_min", models.IntegerField(blank=True, help_text="Discovery year min ", null=True)),
                (
                    "discovery_year_max",
                    models.IntegerField(
                        blank=True, help_text="Discovery year max (leave empty if not known)", null=True
                    ),
                ),
                ("discovery_year_note", models.TextField(blank=True, help_text="Note about discovery year", null=True)),
                (
                    "discovery_year",
                    models.SmallIntegerField(
                        blank=True, help_text="Discovery year (fetched from mindat.org)", null=True
                    ),
                ),
                (
                    "ima_year",
                    models.SmallIntegerField(
                        blank=True, help_text="IMA submission year (fetched from mindat.org)", null=True
                    ),
                ),
                (
                    "publication_year",
                    models.SmallIntegerField(
                        blank=True, help_text="First publication year (fetched from mindat.org)", null=True
                    ),
                ),
                (
                    "approval_year",
                    models.SmallIntegerField(
                        blank=True, help_text="IMA approval year (fetched from mindat.org)", null=True
                    ),
                ),
                ("certain", models.BooleanField(default=True, help_text="Has the discovery year been confirmed?")),
                (
                    "first_usage_date",
                    models.TextField(
                        blank=True, help_text="First usage date (e.g. century, year or approximate timespan)", null=True
                    ),
                ),
                ("first_known_use", models.TextField(blank=True, help_text="First known use notation", null=True)),
                (
                    "mineral",
                    models.OneToOneField(
                        db_column="mineral_id",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="history",
                        to="core.mineral",
                    ),
                ),
            ],
            options={
                "verbose_name": "Discovery Context",
                "verbose_name_plural": "Discovery contexts",
                "db_table": "mineral_history",
            },
        ),
        migrations.CreateModel(
            name="MineralFormula",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "formula",
                    models.CharField(
                        blank=True, help_text="Mineral formula in different formats.", max_length=1000, null=True
                    ),
                ),
                ("note", models.TextField(blank=True, null=True)),
                (
                    "show_on_site",
                    models.BooleanField(
                        default=False,
                        help_text="Whether a specific formula has a priority over the others and thefore should be shown on site.",
                    ),
                ),
                (
                    "mineral",
                    models.ForeignKey(
                        db_column="mineral_id",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="formulas",
                        to="core.mineral",
                    ),
                ),
                (
                    "source",
                    models.ForeignKey(
                        db_column="source_id",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="minerals",
                        to="core.formulasource",
                    ),
                ),
            ],
            options={
                "verbose_name": "Ideal Formula",
                "verbose_name_plural": "Ideal Formulas",
                "db_table": "mineral_formula",
            },
        ),
        migrations.CreateModel(
            name="MineralCrystallography",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("a", models.FloatField(blank=True, default=None, null=True)),
                ("b", models.FloatField(blank=True, default=None, null=True)),
                ("c", models.FloatField(blank=True, default=None, null=True)),
                ("alpha", models.FloatField(blank=True, default=None, null=True)),
                ("gamma", models.FloatField(blank=True, default=None, null=True)),
                ("z", models.IntegerField(blank=True, default=None, null=True)),
                (
                    "crystal_class",
                    models.ForeignKey(
                        db_column="crystal_class_id",
                        default=None,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.crystalclass",
                    ),
                ),
                (
                    "crystal_system",
                    models.ForeignKey(
                        db_column="crystal_system_id",
                        default=None,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="minerals",
                        to="core.crystalsystem",
                    ),
                ),
                (
                    "mineral",
                    models.OneToOneField(
                        db_column="mineral_id",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="crystallography",
                        to="core.mineral",
                    ),
                ),
                (
                    "space_group",
                    models.ForeignKey(
                        db_column="space_group_id",
                        default=None,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.spacegroup",
                    ),
                ),
            ],
            options={
                "verbose_name": "Crystallography",
                "verbose_name_plural": "Crystallographies",
                "db_table": "mineral_crystallography",
            },
        ),
        migrations.CreateModel(
            name="MineralCountry",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("note", models.TextField(blank=True, db_column="note", null=True)),
                (
                    "country",
                    models.ForeignKey(
                        db_column="country_id",
                        default=None,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="minerals",
                        to="core.country",
                    ),
                ),
                (
                    "mineral",
                    models.ForeignKey(
                        db_column="mineral_id", on_delete=django.db.models.deletion.CASCADE, to="core.mineral"
                    ),
                ),
            ],
            options={
                "verbose_name": "Discovery Country",
                "verbose_name_plural": "Discovery Countries",
                "db_table": "mineral_country",
                "unique_together": {("mineral", "country")},
            },
        ),
        migrations.CreateModel(
            name="MineralContext",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("data", models.JSONField(blank=True, null=True)),
                (
                    "context",
                    models.ForeignKey(
                        db_column="context_id",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="minerals",
                        to="core.datacontext",
                    ),
                ),
                (
                    "mineral",
                    models.ForeignKey(
                        db_column="mineral_id",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="contexts",
                        to="core.mineral",
                    ),
                ),
            ],
            options={
                "verbose_name": "Data Context",
                "verbose_name_plural": "Data Contexts",
                "db_table": "mineral_context",
            },
        ),
        migrations.AddField(
            model_name="mineral",
            name="discovery_countries",
            field=models.ManyToManyField(through="core.MineralCountry", to="core.country"),
        ),
        migrations.AddField(
            model_name="mineral",
            name="ima_notes",
            field=models.ManyToManyField(through="core.MineralIMANote", to="core.imanote"),
        ),
        migrations.AddField(
            model_name="mineral",
            name="ima_statuses",
            field=models.ManyToManyField(through="core.MineralIMAStatus", to="core.imastatus"),
        ),
        migrations.AddField(
            model_name="mineral",
            name="impurities",
            field=models.ManyToManyField(related_name="impurities", through="core.MineralImpurity", to="core.ion"),
        ),
        migrations.AddField(
            model_name="mineral",
            name="ion_positions",
            field=models.ManyToManyField(through="core.MineralIonPosition", to="core.ionposition"),
        ),
        migrations.AddField(
            model_name="mineral",
            name="ns_class",
            field=models.ForeignKey(
                blank=True,
                db_column="ns_class",
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="minerals",
                to="core.nsclass",
            ),
        ),
        migrations.AddField(
            model_name="mineral",
            name="ns_family",
            field=models.ForeignKey(
                blank=True,
                db_column="ns_family",
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="minerals",
                to="core.nsfamily",
            ),
        ),
        migrations.AddField(
            model_name="mineral",
            name="ns_subclass",
            field=models.ForeignKey(
                blank=True,
                db_column="ns_subclass",
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="minerals",
                to="core.nssubclass",
            ),
        ),
        migrations.AddField(
            model_name="mineral",
            name="relations",
            field=models.ManyToManyField(through="core.MineralRelation", to="core.mineral"),
        ),
        migrations.AddField(
            model_name="mineral",
            name="statuses",
            field=models.ManyToManyField(through="core.MineralStatus", to="core.status"),
        ),
        migrations.CreateModel(
            name="IonSubunit",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                (
                    "ion",
                    models.ForeignKey(
                        db_column="ion_id", default=None, on_delete=django.db.models.deletion.CASCADE, to="core.ion"
                    ),
                ),
                (
                    "subunit",
                    models.ForeignKey(
                        db_column="subunit_id",
                        default=None,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="ions",
                        to="core.ion",
                    ),
                ),
            ],
            options={
                "verbose_name": "Ion Subunit",
                "verbose_name_plural": "Ion Subunits",
                "db_table": "ion_subunit",
                "unique_together": {("ion", "subunit")},
            },
        ),
        migrations.AddField(
            model_name="ionposition",
            name="ions",
            field=models.ManyToManyField(through="core.MineralIonPosition", to="core.ion"),
        ),
        migrations.CreateModel(
            name="IonElement",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                (
                    "element",
                    models.ForeignKey(
                        db_column="element_id",
                        default=None,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="ions",
                        to="core.element",
                    ),
                ),
                (
                    "ion",
                    models.ForeignKey(
                        db_column="ion_id", default=None, on_delete=django.db.models.deletion.CASCADE, to="core.ion"
                    ),
                ),
            ],
            options={
                "verbose_name": "Ion Element",
                "verbose_name_plural": "Ion Elements",
                "db_table": "ion_element",
                "unique_together": {("ion", "element")},
            },
        ),
        migrations.AddField(
            model_name="ion",
            name="elements",
            field=models.ManyToManyField(through="core.IonElement", to="core.element"),
        ),
        migrations.AddField(
            model_name="ion",
            name="ion_class",
            field=models.ForeignKey(
                blank=True,
                db_column="ion_class_id",
                default=None,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="ions",
                to="core.ionclass",
            ),
        ),
        migrations.AddField(
            model_name="ion",
            name="ion_group",
            field=models.ForeignKey(
                blank=True,
                db_column="ion_group_id",
                default=None,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="ions",
                to="core.iongroup",
            ),
        ),
        migrations.AddField(
            model_name="ion",
            name="ion_positions",
            field=models.ManyToManyField(through="core.MineralIonPosition", to="core.ionposition"),
        ),
        migrations.AddField(
            model_name="ion",
            name="ion_subclass",
            field=models.ForeignKey(
                blank=True,
                db_column="ion_subclass_id",
                default=None,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="ions",
                to="core.ionsubclass",
            ),
        ),
        migrations.AddField(
            model_name="ion",
            name="ion_subgroup",
            field=models.ForeignKey(
                blank=True,
                db_column="ion_subgroup_id",
                default=None,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="ions",
                to="core.ionsubgroup",
            ),
        ),
        migrations.AddField(
            model_name="ion",
            name="ion_type",
            field=models.ForeignKey(
                db_column="ion_type_id",
                default=None,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="ions",
                to="core.iontype",
            ),
        ),
        migrations.AddField(
            model_name="ion",
            name="subunits",
            field=models.ManyToManyField(through="core.IonSubunit", to="core.ion"),
        ),
        migrations.AddField(
            model_name="ion",
            name="variety_of",
            field=models.ForeignKey(
                blank=True,
                db_column="variety_of",
                default=None,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="core.ion",
            ),
        ),
        migrations.CreateModel(
            name="HierarchyView",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("is_parent", models.BooleanField()),
                (
                    "mineral",
                    models.ForeignKey(
                        db_column="mineral_id",
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="hierarchy",
                        to="core.mineral",
                    ),
                ),
                (
                    "relation",
                    models.ForeignKey(
                        db_column="relation_id",
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="inverse_hierarchy",
                        to="core.mineral",
                    ),
                ),
            ],
            options={
                "verbose_name": "Hierarchy View",
                "verbose_name_plural": "Hierarchy View",
                "db_table": "mineral_hierarchy_view",
                "ordering": ["id"],
            },
        ),
        migrations.AddField(
            model_name="element",
            name="goldschmidt_class",
            field=models.ForeignKey(
                db_column="goldschmidt_class_id",
                default=None,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="elements",
                to="core.goldschmidtclass",
            ),
        ),
        migrations.AddField(
            model_name="element",
            name="phase_state",
            field=models.ForeignKey(
                db_column="phase_state_id",
                default=None,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="elements",
                to="core.phasestate",
            ),
        ),
        migrations.AddField(
            model_name="crystalclass",
            name="crystal_system",
            field=models.ForeignKey(
                db_column="crystal_system_id",
                default=None,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="classes",
                to="core.crystalsystem",
            ),
        ),
        migrations.CreateModel(
            name="MineralRelationSuggestion",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                (
                    "relation_type",
                    models.IntegerField(
                        db_column="relation_type_id", help_text="Relation type according to mindat.", null=True
                    ),
                ),
                ("is_processed", models.BooleanField(default=False, help_text="Is the suggestion processed?")),
                (
                    "mineral",
                    models.ForeignKey(
                        db_column="mineral_id",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="suggested_relations",
                        to="core.mineral",
                    ),
                ),
                (
                    "relation",
                    models.ForeignKey(
                        db_column="relation_id",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="suggested_inverse_relations",
                        to="core.mineral",
                    ),
                ),
            ],
            options={
                "verbose_name": "Relation Suggestion",
                "verbose_name_plural": "Relation Syggestions",
                "db_table": "mineral_relation_suggestion",
                "unique_together": {("mineral", "relation", "relation_type")},
            },
        ),
        migrations.AlterUniqueTogether(
            name="mineralrelation",
            unique_together={("mineral", "status", "relation")},
        ),
        migrations.CreateModel(
            name="MineralIonTheoretical",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                (
                    "ion",
                    models.ForeignKey(
                        db_column="ion_id",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="minerals_theoretical",
                        to="core.ion",
                    ),
                ),
                (
                    "mineral",
                    models.ForeignKey(
                        db_column="mineral_id",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="ions_theoretical",
                        to="core.mineral",
                    ),
                ),
            ],
            options={
                "verbose_name": "Theoretical Ion",
                "verbose_name_plural": "Theoretical Ions",
                "db_table": "mineral_ion_theoretical",
                "unique_together": {("mineral", "ion")},
            },
        ),
        migrations.CreateModel(
            name="MineralHierarchy",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                (
                    "mineral",
                    models.ForeignKey(
                        db_column="mineral_id",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="parents_hierarchy",
                        to="core.mineral",
                    ),
                ),
                (
                    "parent",
                    models.ForeignKey(
                        db_column="parent_id",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="children_hierarchy",
                        to="core.mineral",
                    ),
                ),
            ],
            options={
                "verbose_name": "Hierarchy",
                "verbose_name_plural": "Hierarchies",
                "db_table": "mineral_hierarchy",
                "unique_together": {("mineral", "parent")},
            },
        ),
        migrations.AlterUniqueTogether(
            name="ion",
            unique_together={("ion_type", "formula")},
        ),
    ]
