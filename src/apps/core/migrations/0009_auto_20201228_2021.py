# Generated by Django 3.1.2 on 2020-12-28 20:21

from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    dependencies = [
        ('api', '0008_languageslist_msnameslanguage'),
    ]

    operations = [
        migrations.CreateModel(
            name='BondingTypeList',
            fields=[
                ('bonding_type_id', models.AutoField(primary_key=True, serialize=False)),
                ('bonding_type_name', models.CharField(max_length=50, unique=True)),
            ],
            options={
                'verbose_name_plural': 'BondingTypeList',
                'db_table': 'bonding_type_list',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ChemicalGroupList',
            fields=[
                ('chemical_group_id', models.AutoField(primary_key=True, serialize=False)),
                ('chemical_group_name', models.CharField(max_length=50, unique=True)),
            ],
            options={
                'verbose_name_plural': 'ChemicalGroupList',
                'db_table': 'chemical_group_list',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CountryList',
            fields=[
                ('country_id', models.AutoField(primary_key=True, serialize=False)),
                ('country_name', models.CharField(max_length=200)),
                ('alpha_2', models.CharField(max_length=10, null=True)),
                ('alpha_3', models.CharField(max_length=10, null=True)),
                ('country_code', models.IntegerField(null=True)),
                ('region', models.CharField(max_length=100, null=True)),
                ('sub_region', models.CharField(max_length=100, null=True)),
                ('intermediate_region', models.CharField(max_length=100, null=True)),
            ],
            options={
                'verbose_name_plural': 'CountryList',
                'db_table': 'country_list',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ElementList',
            fields=[
                ('element_id', models.AutoField(primary_key=True, serialize=False)),
                ('element', models.CharField(max_length=2)),
                ('name', models.CharField(max_length=20)),
                ('atomic_number', models.IntegerField()),
                ('name_alternative', models.CharField(max_length=20, null=True)),
                ('atomic_mass', models.DecimalField(decimal_places=12, max_digits=15)),
                ('atomic_mass_standard_uncertainty', models.IntegerField(null=True)),
                ('electronic_configuration', models.CharField(max_length=30)),
                ('cpk_hex_color', models.CharField(max_length=6, null=True)),
                ('electronegativity', models.DecimalField(decimal_places=2, max_digits=3, null=True)),
                ('empirical_atomic_radius', models.IntegerField(null=True)),
                ('calculated_atomic_radius', models.IntegerField(null=True)),
                ('van_der_waals_radius', models.IntegerField(null=True)),
                ('covalent_single_bond_atomic_radius', models.IntegerField(null=True)),
                ('covalent_triple_bond_atomic_radius', models.IntegerField(null=True)),
                ('metallic_atomic_radius', models.IntegerField(null=True)),
                ('ion_radius', models.DecimalField(decimal_places=2, max_digits=5, null=True)),
                ('ion_radius_charge', models.CharField(max_length=5, null=True)),
                ('ionization_energy', models.IntegerField(null=True)),
                ('electron_affinity', models.IntegerField(null=True)),
                ('oxidation_states', models.CharField(max_length=50, null=True)),
                ('melting_point', models.IntegerField(null=True)),
                ('boiling_point', models.IntegerField(null=True)),
                ('density', models.DecimalField(decimal_places=6, max_digits=8, null=True)),
                ('crust_crc_handbook', models.DecimalField(decimal_places=10, max_digits=11, null=True)),
                ('crust_kaye_laby', models.DecimalField(decimal_places=10, max_digits=11, null=True)),
                ('crust_greenwood', models.DecimalField(decimal_places=10, max_digits=11, null=True)),
                ('crust_ahrens_taylor', models.DecimalField(decimal_places=10, max_digits=11, null=True)),
                ('crust_ahrens_wanke', models.DecimalField(decimal_places=10, max_digits=11, null=True)),
                ('crust_ahrens_waver', models.DecimalField(decimal_places=10, max_digits=11, null=True)),
                ('upper_crust_ahrens_taylor', models.DecimalField(decimal_places=10, max_digits=11, null=True)),
                ('upper_crust_ahrens_shaw', models.DecimalField(decimal_places=10, max_digits=11, null=True)),
                ('sea_water_crc_handbook', models.DecimalField(decimal_places=11, max_digits=11, null=True)),
                ('sea_water_kaye_laby', models.DecimalField(decimal_places=11, max_digits=11, null=True)),
                ('sun_kaye_laby', models.DecimalField(decimal_places=11, max_digits=16, null=True)),
                ('solar_system_kaye_laby', models.DecimalField(decimal_places=11, max_digits=16, null=True)),
                ('solar_system_ahrens', models.DecimalField(decimal_places=11, max_digits=16, null=True)),
                ('solar_system_ahrens_with_uncertainty', models.DecimalField(decimal_places=2, max_digits=4, null=True)),
                ('natural_isotopes', models.TextField(null=True)),
                ('name_meaning', models.TextField(null=True)),
                ('discovery_year', models.IntegerField(null=True)),
                ('discoverer', models.TextField(null=True)),
                ('application', models.TextField(null=True)),
                ('safety', models.TextField(null=True)),
                ('biological_role', models.TextField(null=True)),
            ],
            options={
                'verbose_name_plural': 'ElementList',
                'db_table': 'element_list',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='goldschmidtClassList',
            fields=[
                ('goldschmidt_class_id', models.AutoField(primary_key=True, serialize=False)),
                ('goldschmidt_class_name', models.CharField(max_length=20, unique=True)),
            ],
            options={
                'verbose_name_plural': 'goldschmidtClassList',
                'db_table': 'goldschmidt_class_list',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='IonClassList',
            fields=[
                ('ion_class_id', models.AutoField(primary_key=True, serialize=False)),
                ('ion_class_name', models.TextField()),
            ],
            options={
                'verbose_name_plural': 'IonClassList',
                'db_table': 'ion_class_list',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='IonElement',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
            ],
            options={
                'verbose_name_plural': 'IonElement',
                'db_table': 'ion_element',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='IonGroupList',
            fields=[
                ('ion_group_id', models.AutoField(primary_key=True, serialize=False)),
                ('ion_group_name', models.TextField()),
            ],
            options={
                'verbose_name_plural': 'IonGroupList',
                'db_table': 'ion_group_list',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='IonList',
            fields=[
                ('ion_id', models.AutoField(primary_key=True, serialize=False)),
                ('ion_name', models.TextField(null=True)),
                ('formula', models.CharField(max_length=100)),
                ('formula_with_oxidation', models.CharField(max_length=100, null=True)),
                ('overall_charge', models.CharField(max_length=100, null=True)),
                ('expressed_as', models.TextField(null=True)),
                ('element_or_sulfide', models.BooleanField(null=True)),
                ('structure_description', models.TextField(null=True)),
                ('geometry', models.TextField(null=True)),
            ],
            options={
                'verbose_name_plural': 'IonList',
                'db_table': 'ion_list',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='IonSubclassList',
            fields=[
                ('ion_subclass_id', models.AutoField(primary_key=True, serialize=False)),
                ('ion_subclass_name', models.TextField()),
            ],
            options={
                'verbose_name_plural': 'IonSubclassList',
                'db_table': 'ion_subclass_list',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='IonSubgroupList',
            fields=[
                ('ion_subgroup_id', models.AutoField(primary_key=True, serialize=False)),
                ('ion_subgroup_name', models.TextField()),
            ],
            options={
                'verbose_name_plural': 'IonSubgroupList',
                'db_table': 'ion_subgroupList',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='IonSubunit',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
            ],
            options={
                'verbose_name_plural': 'IonSubunit',
                'db_table': 'ion_subunit',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='IonTypeList',
            fields=[
                ('ion_type_id', models.AutoField(primary_key=True, serialize=False)),
                ('ion_type_name', models.TextField()),
            ],
            options={
                'verbose_name_plural': 'IonTypeList',
                'db_table': 'ion_type_list',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='LanguageList',
            fields=[
                ('language_id', models.AutoField(primary_key=True, serialize=False)),
                ('language_name', models.CharField(max_length=200, unique=True)),
                ('language_group', models.CharField(max_length=200, null=True)),
                ('other_names', models.CharField(max_length=200, null=True)),
                ('type', models.CharField(max_length=200, null=True)),
                ('scope', models.CharField(max_length=200, null=True)),
                ('standard_639_1', models.CharField(max_length=100, null=True)),
                ('standard_639_2', models.CharField(max_length=100, null=True)),
                ('standard_639_3', models.CharField(max_length=100, null=True)),
                ('standard_639_5', models.CharField(max_length=100, null=True)),
            ],
            options={
                'verbose_name_plural': 'LanguageList',
                'db_table': 'language_list',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='MineralCountry',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('note', models.TextField(blank=True, db_column='note', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name_plural': 'MineralCountry',
                'db_table': 'mineral_country',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='MineralImpurity',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('ion_quantity', models.CharField(blank=True, max_length=30, null=True)),
                ('rich_poor', models.BooleanField(null=True)),
            ],
            options={
                'verbose_name_plural': 'MineralImpurity',
                'db_table': 'mineral_impurity',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='MineralIonReal',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('anion', models.TextField(null=True)),
                ('cation', models.TextField(null=True)),
                ('silicate', models.TextField(null=True)),
                ('other', models.TextField(null=True)),
            ],
            options={
                'verbose_name_plural': 'MineralIonReal',
                'db_table': 'mineral_ion_real',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='MineralIonTheoretical',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
            ],
            options={
                'verbose_name_plural': 'MineralIonTheoretical',
                'db_table': 'mineral_ion_theoretical',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='MineralList',
            fields=[
                ('mineral_id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('mineral_name', models.CharField(max_length=200, unique=True)),
                ('formula', models.TextField(blank=True, null=True)),
                ('note', models.TextField(blank=True, null=True)),
                ('id_mineral', models.CharField(blank=True, max_length=10, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name_plural': 'MineralList',
                'db_table': 'mineral_list',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='MineralNameLanguage',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('meaning', models.TextField(null=True)),
                ('stem_1', models.TextField(null=True)),
                ('stem_2', models.TextField(null=True)),
                ('stem_3', models.TextField(null=True)),
            ],
            options={
                'verbose_name_plural': 'MsNamesLanguages',
                'db_table': 'mineral_name_language',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='MineralNamePerson',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('person', models.CharField(max_length=200)),
                ('born', models.IntegerField(null=True)),
                ('died', models.IntegerField(null=True)),
                ('role', models.TextField(null=True)),
                ('gender', models.CharField(choices=[('M', 'Male'), ('F', 'Female')], max_length=1)),
            ],
            options={
                'verbose_name_plural': 'MineralNamePerson',
                'db_table': 'mineral_name_person',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='MineralRelation',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('relation_note', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name_plural': 'MineralRelation',
                'db_table': 'mineral_relation',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='MineralStatus',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name_plural': 'MineralStatus',
                'db_table': 'mineral_status',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='NationalityList',
            fields=[
                ('nationality_id', models.AutoField(primary_key=True, serialize=False)),
                ('nationality_name', models.CharField(max_length=200)),
                ('note', models.TextField(null=True)),
            ],
            options={
                'verbose_name_plural': 'NationalityList',
                'db_table': 'nationality_list',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='PhaseStateList',
            fields=[
                ('phase_state_id', models.AutoField(primary_key=True, serialize=False)),
                ('phase_state_name', models.CharField(max_length=20, unique=True)),
            ],
            options={
                'verbose_name_plural': 'PhaseStateList',
                'db_table': 'phase_state_list',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='RelationList',
            fields=[
                ('relation_type_id', models.AutoField(primary_key=True, serialize=False)),
                ('type', models.CharField(max_length=200)),
                ('note', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name_plural': 'RelationList',
                'db_table': 'relation_list',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='StatusList',
            fields=[
                ('status_id', models.FloatField(primary_key=True, serialize=False)),
                ('description_group', models.CharField(max_length=100)),
                ('description_long', models.TextField(blank=True, null=True)),
                ('description_short', models.CharField(max_length=100)),
            ],
            options={
                'verbose_name_plural': 'StatusList',
                'db_table': 'status_list',
                'managed': False,
            },
        ),
        migrations.DeleteModel(
            name='CountriesList',
        ),
        migrations.DeleteModel(
            name='IoClass',
        ),
        migrations.DeleteModel(
            name='IoGroup',
        ),
        migrations.DeleteModel(
            name='IonsList',
        ),
        migrations.DeleteModel(
            name='IoSubclass',
        ),
        migrations.DeleteModel(
            name='IoSubgroup',
        ),
        migrations.DeleteModel(
            name='IoTypesList',
        ),
        migrations.DeleteModel(
            name='LanguagesList',
        ),
        migrations.DeleteModel(
            name='MsNamesLanguage',
        ),
        migrations.DeleteModel(
            name='MsNamesPerson',
        ),
        migrations.DeleteModel(
            name='MsSpeciesCountry',
        ),
        migrations.RemoveField(
            model_name='msspecieshistory',
            name='mineral_id',
        ),
        migrations.DeleteModel(
            name='MsSpeciesRelation',
        ),
        migrations.DeleteModel(
            name='MsSpeciesStatus',
        ),
        migrations.DeleteModel(
            name='NationalitiesList',
        ),
        migrations.DeleteModel(
            name='RelationsList',
        ),
        migrations.DeleteModel(
            name='StatusesList',
        ),
        migrations.AlterModelOptions(
            name='grhierarchy',
            options={'managed': (False,), 'verbose_name_plural': 'GrHierarchy'},
        ),
        migrations.AlterModelOptions(
            name='nsclass',
            options={'managed': False, 'verbose_name_plural': 'NsClasses'},
        ),
        migrations.AlterModelOptions(
            name='nsfamily',
            options={'managed': False, 'verbose_name_plural': 'NsFamilies'},
        ),
        migrations.AlterModelOptions(
            name='nssubclass',
            options={'managed': False, 'verbose_name_plural': 'NsSubclasses'},
        ),
        migrations.CreateModel(
            name='MineralHistory',
            fields=[
                ('mineral_id', models.OneToOneField(db_column='mineral_id', on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='history', serialize=False, to='api.minerallist')),
                ('discovery_year_min', models.IntegerField(blank=True, null=True)),
                ('discovery_year_max', models.IntegerField(blank=True, null=True)),
                ('discovery_year_note', models.TextField(blank=True, null=True)),
                ('first_usage_date', models.TextField(blank=True, null=True)),
                ('first_known_use', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name_plural': 'MineralHistory',
                'db_table': 'mineral_history',
                'managed': False,
            },
        ),
        migrations.DeleteModel(
            name='MsSpeciesHistory',
        ),
        migrations.AlterField(
            model_name='grhierarchy',
            name='group_id',
            field=models.ForeignKey(db_column='group_id', on_delete=django.db.models.deletion.CASCADE, related_name='group', to='api.minerallist'),
        ),
        migrations.AlterField(
            model_name='grhierarchy',
            name='mineral_id',
            field=models.ForeignKey(db_column='mineral_id', on_delete=django.db.models.deletion.CASCADE, related_name='mineral', to='api.minerallist'),
        ),
        migrations.AlterField(
            model_name='grhierarchy',
            name='root_id',
            field=models.ForeignKey(db_column='root_id', on_delete=django.db.models.deletion.CASCADE, related_name='root', to='api.minerallist'),
        ),
        migrations.AlterField(
            model_name='grhierarchy',
            name='serie_id',
            field=models.ForeignKey(db_column='serie_id', on_delete=django.db.models.deletion.CASCADE, related_name='serie', to='api.minerallist'),
        ),
        migrations.AlterField(
            model_name='grhierarchy',
            name='subgroup_id',
            field=models.ForeignKey(db_column='subgroup_id', on_delete=django.db.models.deletion.CASCADE, related_name='subgroup', to='api.minerallist'),
        ),
        migrations.AlterField(
            model_name='grhierarchy',
            name='supergroup_id',
            field=models.ForeignKey(db_column='supergroup_id', on_delete=django.db.models.deletion.CASCADE, related_name='supergroup', to='api.minerallist'),
        ),
        migrations.DeleteModel(
            name='MsSpecies',
        ),
    ]
