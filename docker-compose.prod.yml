version: "3.7"

services:

    nginx:
        container_name: nginx
        image: nginx:1.21.0-alpine
        restart: always
        ports:
            - 80:80
            - 443:443
        volumes:
            - ./nginx/prod/nginx-conf/nginx.conf:/etc/nginx/nginx.conf
            - ./nginx/prod/nginx/app.conf:/etc/nginx/nginx.template:ro

            - ./nginx/_data/log:/var/log/nginx

            - ./nginx/certbot/conf:/etc/letsencrypt
            - ./nginx/certbot/www:/var/www/certbot
        env_file:
            - ./.prod.env
        depends_on:
            - backend
        networks:
            - main
        command: >
            /bin/sh -c "envsubst '$${DOMAIN}' < /etc/nginx/nginx.template > /etc/nginx/conf.d/app.conf && while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g 'daemon off;'"

    certbot:
        image: certbot/certbot
        restart: unless-stopped
        volumes:
            - ./nginx/certbot/conf:/etc/letsencrypt
            - ./nginx/certbot/www:/var/www/certbot
        entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
        networks:
            - main

    backend:
        container_name: backend
        build:
            context: .
            dockerfile: Dockerfile.prod
        image: registry.digitalocean.com/mr-project/backend:latest
        command: gunicorn wsgi:application --pythonpath 'src' --bind 0.0.0.0:8000 --worker-class=gevent --worker-connections=1000 --workers=5
        ports:
            - 8000:8000
        env_file:
            - ./.prod.env
        networks:
            - main

    elasticsearch:
        image: docker.elastic.co/elasticsearch/elasticsearch:7.10.0
        environment:
            - discovery.type=single-node
            - http.cors.allow-origin="*"
            - http.cors.enabled=true
            - http.cors.allow-headers=X-Requested-With,X-Auth-Token,Content-Type,Cont>
            - http.cors.allow-credentials=true
        ports:
            - "9200:9200"
        volumes:
            - esdata:/usr/share/elasticsearch/data
        depends_on:
            - backend
        networks:
            - main

    redis:
        restart: unless-stopped
        image: redis:latest
        user: root
        ports:
            - "6379:6379"
        volumes:
            - redisdata:/data
        depends_on:
            - backend
        networks:
            - main

volumes:
    esdata:
    redisdata:
networks:
    main:
        driver: bridge
